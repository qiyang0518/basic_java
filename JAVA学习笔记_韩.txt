快捷键:

复制当前行:alt+c
删除当前行:ctrl+d
补全代码:alt+/
注释:ctrl+/
导入该行的类:alt+enter
格式化:ctrl+shift+L
快速运行程序:alt+r
生成构造方法:鼠标右键->生成->构造函数(alt+insert)
查看类的层级关系:ctrl+h
定位使用方法:ctrl+b
生成构造器,getter,setter方法:alt+a
定点源码:Ctrl+b
实现所有抽象方法:alt+enter
try-catch-finally:选中可能发生异常的代码+ctrl+alt+t
实现接口方法:Ctrl+i
遍历快捷键:itit
快捷键提示键:Ctrl+J
选择覆盖或实现的方法:Ctrl+O
简化版迭代器:I
取a - b的整数:(int)(a + Math.random() *(b - a + 1))
添加至Git缓存区:Ctrl + Alt + A
提交至Git:Ctrl + k
推送至Github:Ctrl + shift + k
模板:

文件-设置-编辑器-实时模板
自动分配变量名:eg:  new Scanner(System.in).var->tab->Scanner scanner = new Scanner(System.in);
sout模板:生成System.out.println()
fori:生成for(int i = 0;i < ;i++)

程序 :计算机执行某些操作或解决某个问题而编写的一系列有序指令的集合。
在命令行中运行:
javac 文件名	编译文件,生成.class文件
java  文件		运行文件
java执行流程分析
.java文件(源文件)>javac编译>.class文件(字节码文件,在JVM中执行)>java运行>结果
编译:
javac Hello.java
通过编译器将其编译成JVM可以识别的字节码文件,在该原文件目录下，通过javac编译工具对Hello。java问价进行编译,
如果程序没有错误，没有任何提示，但在当前目录下会出现一个Hello.class文件，该文件成为字节码文件，也是可以执行的java的程序。
运行:
有可执行的Java程序(Hello.class字节码文件)
通过运行工具java.exe对字节码文件进行执行，本质是.class装载到JVM机执行 

java注意事项:
a、Java源文件以.java为扩展名。源文件的基本组成部分是类(class)。
b、Java应用程序的执行入口是main()方法。它有固定的书写格式:
public static void main(String[] args){...}
c、Java语言严格区分大小写
d、Java方法有一条条语句构成，每个语句以";"结束
e、大括号都是成对出现的，缺一不可
f、一个源文件最多只能有一个public类。其它类的个数不限
g、如果源文件包含一个public类，则文件名必选该类名命名
h、一个源文件中最多只能有一个public类。其它类的个数不限，也可以将main方法写在非public类中，然后制定非public类，这样入口方法就是非publicdemain方法。

需求
1、工作需求
2、跳槽、对方要求
3、技术控
判断能否使用传统技术解决
1、能解决，但不完美
2、解决不了

转义字符
\t	一个制表符(tab)，实现对其功能
\n 	换行符
\\	一个\
\"	一个"
\'	一个'
\r	一个回车
\\\\	两个\\

案例:
老王说什么\r北京
输出结果			解释:先输出老王说什么,而后光标回到老字前面输出北京(覆盖老王)
北京说什么		
解决方法
老王说什么\r\n北京

初学Java易犯错误
a、找不到文件		在文件夹框中输入cmd
b、主类名和文件名不一致
声明为public的主类应与文件名一致，否则编译失败
c、缺少分号
查看错误报告

注释
单行注释
//
多行注释
/*
注释内容
*/
文档注释
注释内容可以被JDK提供的工具javadoc所解析，生成一套一网页文件形式体现的该程序的说明文档，一般写在类
基本格式
/**
	*a
	*b
	*..
*/
如何生成对应的文档注释
javadoc -d 存储路径 -xx -yy 文件名
xx:需要生成的对应属性
yy:需要生成的对应属性
eg:javadoc -d -author -vresion comment.java


代码规范
a、对类、方法的注释，要以Javadoc的方式书写
b、非java Doc的注释，往往是给代码的维护者看的，这种告诉读者为什么这样写，如何修改，注意什么问题
c、使用tab操作，实现缩进，默认整体向右边移动，使用shift+tab整体向左移
d、运算符和=两边习惯性个加一个空格
e、源文件使用utf-8编码
f、行宽度不超过80个字符

常用的dos命令
dir		查看当前目录
cd /D 盘符:
cd..		切换上级目录
cd		切换根目录

相对路径:从当前目录开始
绝对路径:以盘符开始
清屏:cls
退出:exit


变量:是程序的基本组成单位(类型+名称+值),相当于内存中的一个存储空间的表示
变量的使用:
a、声明变量
int a；
b、赋值
a = 8；
c、使用System.out.println(a);

程序中+用法:
当左右两边都是数值型时，则做加法运算
当左右两边有一方为字符串，则做拼接运算

数据类型: 基本数据类型，引用数据类型
基本数据类型：数值型、字符型、布尔型
数值型：整型、浮点型
整型(存放整数):byte[1],short[2],int[4],long[8]
浮点型(存放小数):float[4],double[8]
字符型(存放单个字符):char[2]
布尔型(存放true,false):boolean[1]
引用数据类型:类(class),接口(interface),数组([])

整型注意细节:
java的整型常量(具体值)默认为int型，声明long型常量须后加'l'或'L'
1byte = 8bit 

浮点类型
float:4字节	double:8字节
浮点数在机器中存放形式:浮点数=符号位+指数位+尾数位
尾数部分可能丢失，造成精度损失(小数都是近似值)
注意细节:
java的浮点型常量默认(具体值)double型
声明float型常量，须后加'f'或'F'
**浮点型的运算结果存在误差，因此，不能将结果进行判断，而应进行差值精度范围判断Math.abs(num1-num2)<范围
eg:
double num1 = 8.1 / 3;
num1 = 2.69999999


Java API文档(www.matools.com)


字符串(char)
字符类型可以表示单个字符，字符类型是char，char是两个字节(可以存放汉字)
字符类型使用细节
字符常量用单引号''括起来
在Java中，char的本质是一个整数，在输出时，是unicode码对应的字符
可以直接给char赋一个整数，然后输出时，会按照对应的Unicode字符输出[97>a]

布尔类型(boolean)
boolean类型数据只允许取值true和flase，无null
boolean类型占一个字符
boolean类型适于逻辑运算，一般用于程序流程控制
if条件控制语句
while循环控制语句
do-while循环控制语句
for循环控制语句
注意细节:
不可以0或非0的整数代替false和true


基本数据类型转换
(自动类型转换)当java程序进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型
数据类型按从大到小排序
char>int>long>float>double
byte>short>int>long>float>double
自动类型转换使用和细节
a、有多种类型给你的数据混合运算时，系统首先自动将所有数据转换成容量大的数据类型，然后再进行计算
当我们把精度大的数据类型赋值给精度小的数据类型，将会报错，反之可行
**byte,short和char之间不互相自动转换
**byte,short,char他们三者可以计算，在计算时首先转换为int类型
**boolean不参与运算
**自动提升原则:表达式结果的类型自动提升为操作数中最大的类型

基本数据类型强制转换
自动转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用是要加上强制转换符()，但可能造成精度损失或数据溢出。
eg:int n1 = (int)1.9;
强制类型转换细节
当进行数据的大>小，就需要使用强制类型转换
强转换符号只针对于最近的操作数有效，往往会使用小括号提升优先级
char类型可以保存int的常量值，但不能保存int的变量值，需要强转
 

基本数据类型和String类型的转换
基本数据类型转String类型
语法：将基本类型的值+""即可
注意事项：
在将String类型转成基本数据类型时，要确保String类型能够转成有效的数据
如果格式不正确，就会异常，程序就会终止

String类型转基本数据类型
语法：通过基本类型的包装类调用parseXX方法即可
int num1 = Integer.parseInt(s5);
double d1 = Double.parseDOuble(s5);
字符串转字符，只转字符串中的第一个字符
char gender = myScanner.next().charAt(0);


运算符：
算术运算符
/	a/b	结果符号和类型取决于/前的数
%(取余)	a%b	结果符号和类型取决于/前的数
++	自增(前):先运算后取值	自增(后):先取值后运算
--	自增(前):先运算后取值	自增(后):先取值后运算
关系运算符
instanceof	判断数据类型
逻辑运算符
用于连接多个条件(多个关系表达式)，最终的结果也是一个boolean值。
短路与&&，短路或||，取反！
逻辑与&，逻辑或|，逻辑异或^

逻辑与&/逻辑或|:左右两边的运算都会执行
短路与&&短路或||:只有左边为true时才会执行右边运算
赋值运算符
就是将某个运算后的值，赋给指定变量
三元运算符
条件表达式?表达式1:表达式2;
如果条件表达式为true，运算后的结果是表达式1;
如果条件表达式为false，运算后的结果为表达式2;
eg:
int a = 10;
int b = 99;
int result = a > b ? a ++ : b --;
注意细节:表达式1和表达式2要为可以赋值给接收变量的类型(或可以自动转换)


标识符的命名规则和规范
a、Java对各种变量、方法和类等命名时使用的字符序列成为标识符
b、凡是自己可以起名字的地方都叫标识符
标识符的命名规则(必须遵守)
a、有英文字母大小写，0-9，_或$组成
b、不能以数字开头
c、不可以使用关键字和保留字，但能包含关键字和保留字
d、Java中严格区分大小写，长度无限制
e、标识符不能包含空格
命名规范:
a、包名:多单词组成时所有字母都小写	aaa.bbb.ccc
b、类名,接口名:多单词组成，所有单词首字母大写	XxxYyyZzz
c、变量名,方法名:多单词组成时，第一个单词字母小写，第二个单词开始首字母大写	xxxYyyZzz
d、常量名:所有字母都大写。多单词时每个单词有下划线链接	XXX_YYY_ZZZ


键盘输入语句:
input.java,(需要一个扫描器(对象)),就是Scanner
步骤:
a、导入该类的所在包，java.util.*/Java.util.Scanner
b、创建该类对象(声明变量)	Scanner myScanner = new Scanner(System.in);
c、调用里面的功能int age = myScanner.nextInt();
输入字母:
char c1 = myScanner.next().charAt(0);
转换为名为c1的字符型  扫描器名，调用读取功能，第一个字符
next():
1、一定要读取到有效字符后才可以结束输入。
2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。
3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。
next() 不能得到带有空格的字符串。
nextLine()：
1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。
2、可以获得空白。



进制
二进制:0,1		满2进1,以0b或0B开头
十进制:0-9	
八进制:0-7	以0开头
十六进制:0-9及(10)-F(15)	满16进1，以0x或0X开头表示，不区分大小写

十进制转二进制:
将该数不断除以2，直到商为0，然后将每步得到的余数倒过来
eg:	2|34	0
	  2|17	1
	    2|8	0
	      2|4	0
	       2|2    0
	          1
34->0b00100010


二进制转八进制:
从低位开始，将二进制数每三位一组，转成对应的八进制数即可
0b11010101->0325
101->5
010->2
11->3

二进制转十六进制
从低位开始，将二进制数每四位一组，转成对应的十六进制数
0b11010101->D5
0101->5
1101->13


八进制转二进制
将八进制数每一位，转成对应的一个3位的二进制数即可
0237->0b010011111
十六进制转二进制
将十六进制数每一位，转成对应的一个4位的二进制数即可
0x23B->0B001000111011


**原码,反码,补码(重点)
a、二进制的最高位是符号位，0表示整数，1表示负数
b、正数的原码，反码，补码都一样(三码合一)
  、负数的反码=负数的原码符号位不变，其他位取反
c、负数的补码=负数的反码+1，负数的反码=负数的补码-1
d、0的反码，补码都是0
e、java没有无符号数、
f、在计算机运算时，都是以补码的方式来运算的
g、当我们看运算结果是，要看其原码


位运算符(&,|,^,~,>>,<<,>>>)(转化为二进制数)
按位与&		两位全为1，结果为1，否则为0
按位或|		两位中有1，结果为1，否则为0
按位异或^	两位一个为0，一个为1，结果为1，否则为0
按位取反~	0->1,1->0

算术右移>>	低位溢出，符号位不变，并用符号位补溢出的高位	x>>y->x/(2^y)
算术左移<<	符号位不变，低位补0		x<<y->x*2^y
>>>逻辑右移又称无符号右移 	低位溢出，高位补0
没有<<<符号


程序控制结构
顺序控制
程序从上到下逐行执行，中间没有任何判断和跳转
分支控制
if-else
if(条件表达式){
	执行代码块；
}

双分支
if(条件表达式){
	执行代码块1；
}
else{
	执行代码块2；
}

多分支
if(条件表达式1)
{
	执行代码块1；
}
else if (条件表达式2)
{
	执行代码块3；
}
...
else
{
	执行代码块n；
}
嵌套分支(不超过三层)
if()
{
{
	if else
}
else
{
	if else
}
}

switch分支结构
switch(表达式)
{
	case 常量1:
		语句块1；
	break;
	case 常量2:
		语句块2；
	break;
		case 常量3:
	语句块3；
	break;
	...
	default:
	default语句块；
	break;
}
表达式对应一个值
case常量1:当表达式的值等于常量1，就执行语块1，若不等于，则执行csae常量2,以此类推。
break:退出switch
如果一个都没匹配上，执行default

switch注意事项和细节讨论
1、表达式数据类型，应和case后的常量类型一致，或者是可以自动转成可以相互比较的类型
2、switch(表达式)中的表达式的返回值必须是:(byte,short,int,char,enum,String)
3、case子句中的值必须是常量，而不能是变量
4、default字句是可选的，当没有匹配的case时，执行default
5、break语句用来在执行一个case分支后是程序跳出switch语句块；如果没有break，程序会顺序执行到switch结尾。

for循环控制(看两个实例)
for(循环变量初始化;循环条件；循环变量迭代)
{
	循环操作(可以多条语句);
}
注意事项:
1、循环条件返回的是一个布尔值的表达式
2、for(;循环判断条件;)中的初始化和变量迭代可以写到其他地方，到两边的分号不能省略

while循环
循环变量初始化；
while(循环条件)
{
	循环体；
	循环变量迭代；
}
a、while循环有四要素
b、四要素放的位置和for不同，功能相同

do..while循环 
循环变量初始化；
do
{
	循环体(语句);
	循环变量迭代;
}
while(循环条件);

多重循环控制(实例For2.java)
先执行一次外层循环，再执行内层循环，直至内层循环不满足条件，而后跳出内层循环，继续执行外层循环，直至不满足外层循环。

跳转控制语句(break)
break语句用于终止某个语句块的执行，一般是用在switch或者[for,while,do-while]中
{	...
	break;
	...
}
注意事项:
break语句出现在多层嵌套语句块中时，可以通过标签指明要终止的是哪一层语句块
eg:
label1:
{
...
label2:
{
...
label3:
{
...
break label2;
...
}  
}
}
a、break语句可以指定退出哪层
b、label是标签，名字自定义
c、break后指定到哪个label就退出到哪里
d、在实际的开发中，尽量不要使用标签
e、如果没有指定break，默认推出最近的循环体

匹配字符串是否相等
a、name.equals("匹配对象")		返回boolean类型
b、"匹配对象".equals(name)		推荐第二种,可避免空指针

continue
用于结束本次循环，继续执行下次循环。
跳转控制语句-return
表示跳出所在的方法

数组
可以存放多个同一类型的数据，是一种数据类型，引用类型。
数据类型[] 数组名 = {...,...,...};
数组长度 = 数组名.length
数组的定义
数据类型 数组名 [] = new 数据类型[大小]
int a[] = new int [5];			创建一个int类型容量为5的数组

数组的使用
动态初始化
String strs[] = new String[]{"a","b","c"};
boolean[]默认值为false
先声明数组:
数组类型 数组名[];
数据类型[] 数组名;
int a[];
int[] a;
创建数组:
数组名 = new 数据类型[大小];
a = new int[10];

静态初始化:
数据类型 数组名[] = {元素值,元素值,...}
int a[] = {2,3,...}
各数据类型数组初始化值:
int 0; short 0;byte 0;long 0;float 0.0;double 0.0;char \u0000;boolean false;String null;


jvm的内存:栈、堆、方法区
基本数据类型赋值方式为值拷贝
数组赋值机制:引用传递，赋的值是地址

数组的添加

冒泡排序:
数组中有n个元素，需要排n-1次(外循环)，每次排序中内排序n-i次(内循环)

数组查找:
逐一匹配(循环),未匹配,可引入索引，匹配成功，赋值给索引，匹配失败，索引值不变。

二维数组:每个元素都是一维数组
数据类型 [][] 数组名 = 数据类型[][];
二维数组遍历:(双层循环)
for(int = 0;i < arr.length; i++)				//遍历二维数组每个元素
{
for (int j = 0;j < arr[i].length;j++)				//遍历第i个元素
{
	System.out.print(arr[i][j] + "\t");
}
}

动态初始化
数据类型 [][] 数组名 = new 数据类型 [大小][大小]
int a[][] = new int [2][3];
创建已知行未知列的二维数组
int [][] a = new int [10][];
for (int i;i < a.length;i++)
{
a[i] = new int [i + 1];			//给一维数组分配地址
for (int j =0;j < a[i].length;j++)
{
}
}
二维数组储存原理:
在jvm内存中
arr-->栈中一个地址-->堆中的一个地址(存放二位数组的元素的地址)-->堆中的二维数组中的每个一维数组
杨辉三角:
a、第一行有一个元素，第n行有n个元素
b、每一行的第一个元素和最后一个元素都是1
c、从第三行开始，对于非第一个元素和最后一个元素的元素值.arr[i][j]
arr[i][j] = arr[i-1][j]+arr[i-1][j-1];
int[]x,y[] ;
x为一维数组，y为二维数组
HomeWork10.java反复看。



类与对象
属性定义语法:访问修饰符 属性类型 属性名;
四种访问修饰符:
public,默认,protected,private
属性不赋值有默认值,遵守数组的规则
创建对象:
a、先声明后创建
Cat cat；
cat = new Cat()；
b、直接创建
Cat cat = new Cat();
访问属性:
对象名.属性名;
类与对象的内存分配机制(重要)
栈:一般存放基本数据类型(局部变量)
堆: 存放对象
方法区:常量池(常量,比如:字符串),类加载信息
示意图(Cat(name,age,price))
eg：
Person p = new Person();
p.name = "jack";
p.age = 10;
a、先加载Person类信息(属性和方法信息,且只加载一次)
b、在堆中分配空间，进行默认初始化(看规则),把地址赋给p,p就指向对象
c、进行指定初始化

成员方法:(方法不能嵌套定义)
public void X()
{}
公共的,返回值为空,名为X的,()无参的方法
方法调用机制分析
栈中创建空间(Person p1 = new Person)
再在栈中创建独立空间
方法调用小结
a、当程序执行到方法时,就会开辟一个独立栈空间
b、当方法执行完毕,或者执行到return语句时,就会放回到调用方法的语句
c、放回后继续执行后续代码
d、当main方法执行完毕后,整个程序退出

方法的优点:
提高代码的复用性
可以实现的细节封装起来,然后供其他用户来调用

成员方法的定义:
public 返回数据类型  方法名(形参列表)
{方法体语句
return 返回值;
}

引用传递:
传递的是一个地址,可以通过形参影响实参

递归重要规则
a、执行一个方法时,就创建一个新的受保护的独立空间(栈空间)
b、方法的局部变量是独立的,不会相互影响(比如n变量)
c、如果方法中使用的是引用类型变量(比如数组),就会共享该引用类型的数据
d、递归必须向推出递归的条件逼近,否则就输无限递归,出现(StackOverflowError,类似死循环)
e、当一个方法执行完毕,或者遇到return,就会返回,遵守谁调用,就将结果返回给谁,同时当方法执行完毕或者返回时,该方法也就执行完毕.


引入随机生成数
import java.util.Radom;
Random a = new Random();
int num = a.nextInt(x);		//x为生成数的范围(1-x) 
Math.abs(x),求x的绝对值Math.abs(-1);
回溯算法:


方法重载:
在同一个类中,多个方法可同名,但形参列表不一致
注意事项:
方法名必须相同
形参列表必须不同(数据类型不同,数据个数不同,参数名无要求)
返回类型无要求

可变参数:(将参数列表当做是一个数组)
同一个类中多个同名同功能但参数个数不同的方法,封装成一个方法。
基本语法:
访问修饰符 返回类型 方法名(数据类型...形参名)
{}
注意事项:
实参可以为0或任意多个
实参可以是数组
可变参数实质是数组
可变参数可以和普通类型参数一起放在形参列表,但必须保证可变参数在最后
一个形参列表中只能出现一个可变参数	

作用域:(重点)
变量(局部,成员(属性))
全局变量:
属性,作用域为整个类体
局部变量:
定义它的代码块中
全局变量可以不赋值,直接使用,因为用默认值,局部变量必须赋值后使用,无默认值
作用域注意事项:
属性和局部变量可以重名,访问时遵循就近原则
在同一个作用域,比如同一个成员方法中,两个局部变量,不能重名.
属性生命周期较长,伴随着对象的创建而创建,伴随着对象的死亡而死亡.局部变量,生命周期较短,伴随着它的代码块的执行而从创建,伴随着代码块的结束而死亡(即在一次方法调用过程中).
作用域的范围不同
全局变量/属性:可以被本类使用,或其它类使用(通过对象调用)
局部变量:只能在本类对应方法使用
修饰符不同:
全局变量/属性可以加修饰符
局部变量不可以加修饰符


构造方法(构造器):(对新对象的初始化)
基本语法:
[修饰符] 方法名(形参列表)
{
方法体;
}
注意:
构造器的修饰符可以默认
构造器没有返回值
方法名和类名一致
参数列表和成员方法一样的规则
构造器系统自动调用

构造器注意事项:
一个类可以定义多个不同的构造器(构造器重载)
构造器名和类名一致
构造器无返回值
构造器是完成对象的初始化,并不是创建对象
在创建对象时,系统自动调用该类的构造方法(已生成空间)
如果构造器未定义,系统自动给类生成无参构造器(默认构造方法)
一旦自定义构造器,则覆盖默认构造器。

javap时jdk提供的一个命令行工具,javap能对给定的class文件进行反编译
(显示类的细节)返回代码文件
javap -c -v 类名

对象创建流程:
加载类信息(只加载一次),在堆中分配空间,完成对象初始化(分配空间中对应常量池中的地址),在对象在堆中的地址返回给对象

this关键字
this指向当前对象(哪个对象调用就指向该对象)
对象名.hashcode()	获取对象地址
this注意事项:
this可以访问类的属性,方法,构造器
访问成员方法:this.方法名(参数列表)
访问构造器:this(参数列表)	注意:只能在构造器中使用,置于第一行()
this不能再类定义的外部使用,只能在类定义的方法中使用

包:(创建不同文件夹保存类文件)
区分相同的类
当类数量大时,便于管理
控制访问范围
语法:
package com.hspedu;    
com.hspedu:包名 
包命名规则:
只能包含数字、字母、下划线、小圆点.，但不能用数字开头，不能用关键字或保留字
命名规范:
com.公司名.项目名.业务模块名
eg:com.hsped.oa.model;com.hspedu.oa.controlled;
java中常用的包:
java.lang.*		lang包是基本包,默认引入
java.util.*			系统提供的工具,工具类,如Scanner
java.net.*			网络包,网络开发
java.awt.*			java界面开发,GUI

如何引入包:
import 包名
注意事项:
packa作用是声明当前类所在的包，需要放在类的最上面
import指令位置放在packa的下面，在类定义前面，可以有多句且没有顺序要求


访问修饰符：(重点)
public：对外公开
protected：对子类和同一个包中的列公开
默认级别：没有修饰符，同一个包的类公开
private：只有类本身可以访问，不对外公开

面向对象的三大特征:
封装
把抽象出来的数据(属性)和对数据的操作(方法)封装在一起，数据被保护在内部，程序的其他部分只有通过授权的操作(方法)，才能对数据进行操作
优点：
隐藏实现细节 方法（连接数据库）<-调用（传入参数）
可以对数据进行验证，保证安全合理
封装实现步骤：
将属性进行私有化private【不能直接修改属性】
提供一个公共的（public）set方法，用于对属性判断并赋值
eg：
public void set Xxx(数据类型 参数名)
{
属性 = 参数名；
}
提供一个公共的（public）get方法用于获取属性的值
eg：
public 数据类型 getXxx（）
{
return xx；
}
如何防止getter方法和setter方法属性(不符属性要求)被修改:
可以将构造器写置所有方法之后
继承
解决代码复用
语法:
class 子类 extends 父类
{
}
子类自动拥有父类定义的属性和方法
优点:
代码复用性提高
提高代码扩展性，维护性
注意细节:
子类继承了所有属性和方法,但无法直接访问私有属性和方法,需要通过父类提供的公共方法访问
子类必须调用父类的构造器，完成父类初始化(隐藏了(super() 默认调用父类无参构造器))
当创建子类对象时,不管使用子类的那个构造器，默认情况下总会去调用父类的无参构造器，则必须在子类的构造其中用super去指定使用父类的那个构造器完成对父类初始化工作，否则编译不通过
如果子类希望指定去调用父类的某个构造器，则显示的调用一下:super(参数列表),默认调用无参super()(被隐藏了)
super()在使用时,必须放在构造器第一行(只能在构造器中使用)
super()和this()都只能放在构造器第一行，因此这两个方法不能共存在于一个构造器中。
java所有类都是Object类的子类，父类构造器的调用不限于直接父类，将一直往上追溯直到Object类
子类最多只能继承一个父类(直接继承,单继承)
不能滥用继承,子类和父类之间必须满足是is-a的逻辑关系
继承本质分析(重要)
先加载Object类(分配该类对应空间)->Grandpa(分配该类对应空间)->Father(分配该类对应空间)->Son(分类对应空间)
查找属性规则:(自下而上查找,直到Object类)

super关键字
代表父类的引用，永远访问父类的属性，方法，构造器
访问父类的属性，但不能访问父类的私有属性(private)
访问父类的方法，不能访问父类的私有方法(private)
访问父类的构造器
super细节
调用父类构造器，分工明确，父类属性由父类初始化，子类属性由子类初始化
当子类中有和父类中的成员(属性，方法)重名时，味蕾访问父类的成员，必须通过super,如果没有重名使用super，this效果一致。

方法重写/覆盖
方法覆盖就是子类有一个方法和父类的某个方法名称和返回类型，参数一样
子类方法返回类型和父类方法返回类型一样,或者是父类返回类型的子类。
eg：父类返回类型是Object，子类方法返回类型是String
子类方法不能缩小父类方法的访问权限(public->protected->默认->private)
重写和重载的区别
	发生范围		方法名		形参列表 				返回类型							修饰符
重载  	本类		必须一样		类型，个数或者顺序至少有一者不同	无要求							无要求								
重写	父子类		必须一样		相同				子类重写的方法，返回类型和父类返回类型一致，或是类型的子类	子类不能缩小父类的访问权限


多态
方法或对象具有多种形态
对象的多态:
一个对象的编译类型和原型类型可以不一致
编译类型在定义对象时，就确定了，不能改变
运行类型是可以变化的
编译类型看定义时=号的左边，运行类型看=号的右边
Animal animal = new Dog();		animal编译类型是Animal，运行类型是Dog
animal = new Cat();			animal的运行类型变成了Cat，编译类型仍然是Animal

多态注意细节:
多态前提是:两个对象(类)存在继承关系
方法的调用看运行类型,属性的调用看编译类型

多态的向上转型
本质:父类的引用指向了子类的对象
语法:父类类型 引用名 = new 子类类型();
特点:编译类型看等号左边，运行类型看等号右边
       可以调用父类中所有的成员(需遵守访问权限)
       不能调用子类中特有成员
       最终运行效果看子类的具体实现

多态的向下转型
语法:子类类型 引用名 = (子类类型) 父类引用;
只能强转父类的引用,不能强转父类的对象		//实例化的对象 Dog dog = (Dog) animal;	
要求父类的引用必须指向的是当前目标类型的对象
当向下转型后，可以调用子类类型中的所有成员

多态的注意事项/细节
属性没有重写之说,属性的值看编译类型
instanceOf比较操作符，用于判断对象的运行类型是否为XX类型或XX类型的子类型

java的动态绑定机制(非常重要):
当调用对象方法时，该方法或和该对象的内存地址/运行类绑定
当调用对象属性时，没有动态绑定机制，那里声明，那里引用

多态的应用:
多态数组:
数组的定义类型为父类类型，里面保存的实际元素类型为子类类型


Object类:
==和equals的对比：
==:既可以判断基本类型，有可以判断引用类型，如果判断基本类型,判断的值是否相等,如果判断引用类型，判断的是地址是否相等，即判定是不是同一个对象
equals:比较值是否相等,只能判断用用类型,默认判断的是地址是否相等,子类中往往重写该方法,用于判断内容是否相等。


hashCode方法:
提高具有哈希结构的容器的效率；
两个引用，如果只想的是同一对象，则哈希值肯定是一样的。
两个引用，如果只想的是不同对象，则哈希值是不一样的。
哈希值主要根据地址号来计算的，不能完全将哈希值等价于地址。


toString方法:
默认返回:全类名+@+哈希值的十六进制(查看Object的toString方法)
子类往往重写toString方法，用于返回对象的属性信息
重写toString方法:打印对象或拼接对象时，都会自动调用该对象的toString形式
当直接输出一个对象时，toString方法会被默认调用

finalize方法:
当对象被回收时，系统自动调用该对象的finalize方法。子类可以重写该方法，最一些释放资源(比如数据库的链接，打开文件)的操作。
什么时候被回收：当某个对象没有任何引用时，则jvm就认为这个对象是一个垃圾对象，就会使用垃圾回收机制来销毁该对象，在销毁该对象前，回想调用finalize方法。
垃圾回收机制的调用，是由系统来决定，也可以通过System.gc()主动出发垃圾回收机制。

断点调式:
逐步查看源码执行的过程
在断点调试过程中，是运行状态，是以对象的运行类型来执行的。
介绍:
断点调试是指在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可一步一步往下走调试，调试过程中可以看各个变量当前的值，出错时，会显示出错行所在位置。
断点调试是程序员必须掌握的技能。
断点调试也能帮助我们查看java地成员代码的执行过程，提高程序员的Java水平。
快捷键:F7(跳入),F8(跳过),shift+F8(跳出),F9(resume,执行到下一个断点)
F7:跳入方法内
F8:逐行执行代码
shift+F8:跳出方法
追踪源码:通过调试
支持动态下断点
数组顺序排序方法:Array.sort(Xxx);	Xxx:为数组名


项目实现的过程:
SimpleDateFormat:用于日期格式化(格式化Date日期)

三部曲:
明确功能->思路分析->代码实现

用static修饰的方法,可以直接通过类名调用.
eg:public static void cry()
{}



类变量、类方法
类变量:静态变量是该类所有对象共享的变量，任何一个该类的对象去访问它时，取到的都是相同的值，同样任何一个该类的对象去修改它时，修改的也是同一个变量
static变量是所有对象共享的(同一个类中)是在类加载时生成的
定义语法:
访问修饰符 static 数据类型 变量名;
static 访问修饰符 数据类型 变量名;
如何访问类变量
类名.类变量名/对象名.类变量名	
使用细节:
什么时候需要用类变量:
需要共享同一个变量时，使用类变量(静态变量)
类编类与实例变量区别:
类变量时该类的所有对象共享的，实例变量是每个对象独享的
static是类变量的标志
实例变量不能通过类名.类变量名方式访问
类变量是在类加载时就初始化了
类变量的生命周期是随类的加载开始，随着类消亡而销毁
类方法:
访问修饰符 static 数据返回类型 方法名(){}
static 访问修饰符 数据返回类型 方法名(){} 
类方法的调用:
类名.类方法名 或者对象名.类方法名
类方法使用场景:
当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法，提高开发效率。
在程序员实际开发中，将一些通用的方法，设计成静态方法，这样可以不创建对象就可以使用。
类方法和普通方法都是随着类的加载而加载，将结构信息储存在方法区；类方法中无this的参数，普通方法中隐含着this的参数
类方法可以通过类名调用，也可以通过对象名调用
普通方法和对象有关，需要通过对象名调用。
类方法(静态方法)中只能访问静态变量或静态方法
普通成员方法，即可以访问非静态成员也可以访问静态变量
规则:静只访静，非静可访静或非静(需遵循访问权限)
 

main方法语法
main方法时虚拟机调用
Java虚拟机需要调用类的main()方法,所以该方法的访问权限必须是public
java虚拟机在执行main()方法时不必创建对象，所以该方法必须是static
该方法接收String类型的数组参数，该数组中保存执行java命令时传递给所运行的类的参数


代码块:
初始代码块，属于类中的成员（即是类的一部分），将逻辑语句分装在方法体中，通过{}包围起来
但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显式调用，而是加载类时，或创建对象时隐式调用。
语法:
修饰符 
{
代码
};
修饰符可选
逻辑语句可以为任何逻辑语句(输入，输出，方法调用，循环，判断)
;号可以写上一可以省略

注意:
修饰符可选，只能写static
代码块分两类:静态/非静态
逻辑语句可以为任何逻辑语句(输入,输出,方法调用,循环,判断)

注意细节:
static代码块也叫静态代码块，作用是对类进行初始化，而且它随着类的加载而执行，并且只会执行一次。普通代码块，每创建一个对象就执行。
类什么时候被加载
创建对象实例时
创建子类对象实例，父类也会被加载，父类先被加载
使用类的静态成员时(静态属性,静态方法)

普通代码块，在创建对象实例时，会被隐式的调用，被创建一次就睡调用一次
如果只是使用类的静态成员时，普通代码块并不会执行

静态代码块，静态属性初始化，普通代码块，普通属性初始化，构造方法调用顺序
1、父类的静态代码块和静态属性(优先级一样，按定义顺序执行)
2、子类的静态代码块和静态属性(优先级一样，按定义顺序执行)
3、父类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)
4、父类的构造器
5、子类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)
6、子类的构造方法


设计模式
是在大量的时间中总结和理论化之后优选的代码结构，编程风格、以及解决问题的思考方式。
单例模式
所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只能提供一个取得其对象实例的方法。
类型:饿汉式、懒汉式
饿汉式创建步骤:(已经创建了等待使用,缺点:可能造成资源的浪费)
1、构造器私有化 (防止用户创建对象)
2、类的内部创建对象
3、向外暴露一个静态的公共方法(getInstance)
4、代码实现

懒汉式创建步骤:
1、构造器私有化(防止用户创建对象)
2、类的内部创建对象
3、向外暴露一个静态公共方法(getInstance)

饿汉式-懒汉式区别
1、而这最主要的去不在于创建对象的实际不同；饿汉式是在类的加载就创建了对象实例，而懒汉式实在是用时才创建。
2、饿汉式不存在线程安全问题，懒汉式存在线程安全问题。
3、饿汉式存在资源浪费的可能。(实例可能创建后未使用)
java.lang.RunTime就是标准的单例模式

final关键字
final修饰的属性为常量,用XX_XX_XX来命名
final修饰的属性在定义时,必须赋初值,并且以后不能修改,复制可以在如下位置之一
	定义时
	在构造器中
	在代码中
如果final修饰的属性是静态的,则初始化的位置只能是
	定义时
	在静态代码块中，不能在构造器中赋值
final类不能继承，但是可以实例化对象
如果类不是final类，但是含有final方法，则该方法不能重写，但能被继承。
一般来说，如果一个类已经是final类了，就没有必要再将方法修饰成fianl方法
final不能修饰构造器
final和static往往搭配使用，效率更高，不会导致类的加载，底层编译器做了优化处理
包装类(int、double、float、boolean、string等都是final)，不能被继承




抽象类
用abstract关键字来修饰的类
语法
访问修饰符 abstract 类名{
}
抽象方法:用abstract关键子修饰的方法
语法:
访问修饰符 abstract 放回类型 方法名(参数列表);
抽象类的价值更多作用在于设计，是设计者设计好后，让子类继承并实现抽象方法
注意细节;
抽象类不能被实例化
抽象类不一定要包含abstract方法。
类中有抽象方法，该类必须用abstract声明
abstract只能修饰类和方法，不能修饰属性或者其他的
抽象方法不能使用private、final、static来修饰(子类无法重写父类抽象方法)

接口
接口就是给出一些没有实现的方法，封装到一起，到某个类使用时，根据具体情况把这些方法实现。
语法:
interface 接口名
{
属性;
方法;
}


实现接口
class 类名 implemens 接口		//必须实现接口的抽象方法
{
自己属性;
自己方法;
}
小结:
在JDK7.0前接口里的所有方法都没有方法体(都是抽象方法)
JDK8.0后接口类可以有静态方法，默认方法(接口中可以有方法的实现，需要使用defaut修饰)

接口
一个类可以实现多个接口
接口中的属性，只能是final的，而且是public static final修饰符。
接口中属性的访问形式:接口名.属性名
一个接口不能继承其他类，但是可以继承多个其他接口
接口的修饰符，只能是public和默认(同类一致)


接口和继承类的区别
解决问题的不同
集成的价值主要在于:解决代码的复用性和可维护性
接口的价值主要在于:设计，设计好各种规范(方法),让其它类去实现这些方法
接口比继承更加灵活
继承是is-a的关系，接口只需满足like-a的关系
接口在一定程度上实现代码解耦(接口的规范性+动态绑定机制)


接口的多态特性
多态参数
同一个接口供不同对象使用
多态数组
接口存在多态传递现象


内部类:
局部内部类的使用
说明:局部内部类是定义在外部类的局部位置(方法中)
1、可以直接访问外部类的所有成员，包含私有的
2、不能添加访问修饰符(局部变量无修饰符),可以用final修饰
3、作用域:仅仅在定义它的方法或代码块中
4、局部内部类->访问->外部类的成员(直接访问)
5、外部类->访问->局部内部类的成员(创建对象访问,必须在作用域中)
6、外部其他类--不能访问->局部内部类(局部内部类类似于一个局部变量)
7、如果外部类和局部内部类的成员重名是，默认遵循就近原则，访问外部类的成员，使用(外部类名.this.成员)访问

匿名内部类
匿名内部类是定义在外部类的局部位置，比如方法中，并且没有类名
1、匿名内部类的基本语法
new 类或接口(参数列表)
{
类体
};
获取类的运行类型：
类名.getClass()

内部类
可以直接访问外部类的所有成员，包含私有的
不能添加访问修饰符，本质是局部变量
作用域:仅仅在定义它的方法或代码块中
匿名内部类->外部类成员(直接访问)
外部其他类不能访问匿名内部类(匿名内部类是局部变量)
如果外部类和内部类的成员重名时，匿名内部类访问的话，默认遵守就近原则，访问外部成员可通过(外部类名.this.成员)访问


成员内部类
成员内部类是定义在外部类的成员位置，并且没有static修饰
a、可以直接访问外部类的所有成员，包含私有的
b、可以添加任意访问修饰符(public,protected,默认,private),本质时一个成员


自定义类实现枚举(默认存在无参构造器)
a、不需要提供setXxx方法，因为枚举对象通常为只读
b、对枚举对象/属性使用final+static共同修饰，实现底层优化
c、枚举对象名通常使用全部大写，常量的命名规范
d、枚举对象根据需要，也可以由多个属性
反编译:
javap 文件名.class
注意事项:
使用enum关键字默认继承Enum类,而且是final类
如果使用的是无参构造器，创建常量可省略()
当有多个枚举对象时,使用,间隔，最后一个用分号结尾
枚举对象必须放在枚举类的行首(放在类首)

enum类常用方法
toString()  返回name
ordinal()	返回该对象在enum类的次序(编号,从0开始)
values()	返回对象的数组(包含所有枚举对象)
valueOf()  将字符串转换成枚举对象，要切字符串必须为已有的常量名，否则报错


@override 校验是否继承父类方法，注解类，只能修饰方法，不能修饰其他
@Target 修饰注解的注解
@Deprecated 注解已弃用类、方法、属性、包。
@SuppressWarnings 抑制警告方法、类、属性。


元注解:
@Documented注释是否加载至Javadoc


Exception 异常
选中可能出现异常的代码块->快捷键ctrl+alt+t->try catch
异常事件类别:
ERROR(错误):Java虚拟机无法解决的严重问题，如：JVM系统内部错误，资源耗尽，具体实例:StackOverflowError[栈溢出]和OOM(out of memory),Error是严重的错误,程序会崩溃
Exception:其他因编程错误或偶然的外在因素导致的一般性问题,可以使用针对性的代码进行处理，例如空指针访问，试图读取不存在文件，网络连接中断等，分类:运行时异常，编译时异常

常见运行时异常：
ClassCastException:
当试图将对象强制转换为不是实例的子类时,抛出该异常
try
{
   代码可能异常
}
catch(Exception e)
{
  //捕获异常
  // 当异常发生时
  // 系统将异常封装成Exception对象e,传递给catch
  //得到异常对象后,程序员自行处理
}
finally
{
//不管try代码块是否发生异常,是重要执行finally
}
try-catch-finally注意事项
如果发生异常,异常发生后面的代码不会执行,zhijiejinrucatch块
如果异常没发生,则顺序执行try代码块,不会进入catch块
如果希望不管是否发生异常,都执行某段代码(比如关闭连接,释放资源),则使用如下代码-finally
存在多个异常时,子类异常在前,父类异常在后
try-finally用法:该用法没有捕获异常,程序会直接崩掉,应用场景,执行一段代码,不挂是否发生异常,都必须执行某个业务逻辑

throws(默认采用)
注意细节:
对于编译异常,程序必须处理(try-catch,throws)
对于运行时异常,程序中如果没有处理,默认throws方式处理
子类重写父类的方法时,对抛出异常的规定:子类重写的方法,所抛出的异常类型要么和父类抛出的异常一致，要么为父类抛出异常的子类
在throws过程中，如果有try-catch方法,就相当于处理异常，就可不必throws

自定义异常:
该异常没有在Throwable异常类中.
自定义异常一般继承runtimexception(原因:可以使用默认异常处理机制)


throw和throws区别:
throw  	异常处理的一种方式  	方法声明处 	异常类型
throws  	手动生成异常对象关键字	方法体中		异常对象



包装类(Wrapper)
包装类和基本数据的转换
装箱:基本类型->包装类
拆箱:包装类->基本类型
Jdk5以后自动装箱,拆箱
自动装箱底层调用的是ValueOf()方法
自动拆箱底层调用的是intValue()方法

包装类和String类型间的转换
Integer->String
.toString() or .valueOf()
String->Integer
.paraseInt(str)
new Integer(str)
 
Integer,Character 常用方法
Integer:
MIN_VALUE:返回最小值
MAX_VALUE:返回最大值
Character:
isDigtal():判断是否为数字
isLetter():判断是否为字母
isUpperCase():判断是否为大写字母
isLowwerCase():判断是否为小写字母
isWhitespace():判断是否为空格
toUpperCase():转成大写
toLowwerCase():转成小写


Integer Cache.low-IntegerCache.high -128->127
超过这个范围,则创建对象new Integer()

在包装类和基本数据类型比较时:
只要有基本数据类型参与,都是比较值是否相等


String类
一组字符序列,用双引号括起采用Unicode字符编码，一个字符(不区分字母还是汉字)占两个字节
实现了Serializable接口的类:就实现了串行化,可以在网络上传输
是final类，不能被继承，不能被修改(物理地址不能被修改,值可被修改)，本质还是char数组

String创建方式
String s = "";
在常量池中直接创建地址并赋值
String s = new String("");
现在常量池中寻找是否存在该字符,若不存在则创建地址并赋值
.equals()比较值是否相等
.intern()方法最终返回的是常量池的地址(对象)

String a = "Hello" + "abc";
只创建了一个对象String a = "Helloabc";

eg:
String a = "hello";
String b = "abc";
String c = a + b;
创建三个对象,底层是 StringBuilder sb = new String Builder();
		sb.append(a),ab.append(b);sb是在堆中,并且append是在原来的字符串基础上追加的。
重点:String c1 = "ab" + "cd";常量相加,在池中
	String c1 = a + b;变量相加,在堆中
String 类是保存字符串常量的。每次更新都需要重新开辟空间，效率低，提供了StringBuilder和 StringBuffer来增强String功能

StringBuffer戴白哦可变的字符序列,可以对字符串内容进行增删，长度是可变的，是一个容器

StringBuffer常用方法:
增:append
删：delete(start,end)
改:replace(start,end,string)jiangstart--end间的内容替换掉，不含end
查：indexOf查找子串在字符串第一次出现的索引，如果找不到返回-1
插：insert
获取长度length

StringBuilder类
一个可变序列。用在单线程
方法append、insert，可重载


2023/5/7
String、String Buffer、StringBuilder的比较
String：不可变字符，效率低、复用性高
StringBuffer：可变字符序列、效率较高(增删)、线程安全
StringBuilder：可变序列、效率最高、线程不安全
如果我们对String做大量修改，不采用String而采用StringBuffer(原因:产生大量的副本数据,影响程序的性能)

String、String Buffer、StringBuilder的选择:
如果字符串需要大量修改，采用StringBuffer或者StringBuilder
如果字符串需要大量修改，并在单线程情况，采用StringBuilder
如果字符串需要大量修改，并在多线程情况，采用StringBuffer
如果字符串少量修改，被多个对象引用，采用String(配置信息)


Arrays方法:
.toString(数组名)
.sort(arr)			//标准排序
定制排序
.sort(arr, new Comparator(){
public int compare (Object a2, Object a2)
{
Integer i1 = (Integer) a1;
Integer i2 = (Integer) a2;
return i2 - i1;	//逆序排序,	i1 - i2 顺序排序
}
})

二叉查找:
.binarySearch(arr,被查找数)
有序数组，返回值为index，不存在的值(不超过范围)返回值为-1、超出范围(-arr[最靠近目标数].index-1)
.copyOf(arr,length)		//拷贝数组,拷贝长度大于arr.length,后添加null，拷贝长度小于零抛出异常
.fill(arr,填充数)		//数组元素全部替换
.equal(arr1,arr2)		//数组比较是否相等
.asList(arr)

System类
.exit(0)					//退出当前程序,0表示正常退出
.arrycopy(src,srcPos,dest,destPos,length)		//复制数组元素
.currentTimeMillens()			//返回当前时间距离
.gc()					//运行垃圾回收机制

BigInteger和BigDecimal类
进行加减乘除时应采用对应的方法
BigInteger a = new  Big Integer("12631923718378917283");
.divide(除数,BigDecimal.ROUND_CEILING)	//除不尽,采用限制精度,解决异常


日期类
Date：精确到毫秒，特定的瞬间
Date d1 = new Date();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 hh:mm:ss E");
Calendar没有给定显示实际时间的格式,需自己组合
Calendar存在的问题:
可变性:像日期这样的事件类应该是不可变的
偏移性:Date中的年份从1900开始，月份从0月开始
格式化:格式只对Date有用，Calendar需自定义格式
线程不安全，不能处理闰秒，每个2天，多出1s
LocalDate(日期/年月日)、LocalTime(时间/时分秒)、LocalDateTime(年月日时分秒)

转换:
.getYear()
.getMonthValue()

2023/5/8
LocalDateTime ldt = LocalDateTime.now()
 DateTimeFormat dtf = DateTimeFormat().ofPattern("yyyy年MM月dd日 hh:mm:ss E")
String fomat = dtf.format(ldt);

Instant时间戳
instant->Date
Date date = Date.from(instant)
Date->instant
Instant instant = date.toInstant();
 

集合:
可以动态保存过个对象，使用方便
提供一系列方便操作对象的方法：add、remove、set、get
使用集合添加、删除新元素的示意代码

集合分类：单列集合、双列集合
Collection接口有两个重要的子接口List Set，他们的实现子类都是单列集合
Map接口的实现子类是双列集合，存放K-V(键值对)

Collection接口实现类的特点
public interface Collection <E> extends Iterable<E>
1、Collection实现子类可以存放多个元素，每个元素可以是Object
2、有些Collection的实现类、可以存放重复的元素、有些不可以
3、有些Collection的实现类、有序List，无序Set
4、Collection接口没有直接地实现子类，是通过他的子接口Set和List来实现的


Collection接口遍历元素方式1(使用Iterator迭代器)
Iterator对象称为迭代器，主要用于遍历Collection集合中的元素
所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象，返回一个迭代器
Iterator仅用于遍历元素，Iterator本身不存放对象


Iterator执行原理
Iterator iterator  = coll.iterator();		//得到一个集合的迭代器
//hasNext():判断是否还有下一个元素
While(iterator.hasNext())
{
//next():1、指针下移2、将下移以后集合位置上的元素返回
sout(iterator.next());
}
注意:在调用iterator.next()方法之前必须要调用iterator.hasNet()进行检测，若不检测，则下一条数据无效，
直接调用iterator.next()会抛出NoSuchElementException异常
如果需要再次遍历，iterator = col.iterator();


Collection接口便对象方式2-for循环增强
增强for循环，可以代替iterator迭代器，特点:增强for就是简化版的iterator
本质一样，只能用于遍历集合或数组
语法:
for(元素类型 元素名 : 集合名或数组名)
{
访问元素
}



List接口常用方法:
List接口是Collection接口的子接口
List集合类中元素有序(添加山圩和取出顺序一致)，且重复
List集合中的每个元素都有其对应的顺序索引，即支持索引
List容器中的元素对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素


List三种遍历方式
方式一:使用iterator
方式二:使用增强for
for(Object list : al)
{
sout(list);
}
方式三:使用普通的for
for(int i = 0; i < list.size;i++)
{
sout(list.get(i);
}

ArraysList注意事项
Array List可以加入null，并且多个
ArrayList是由数组来实现数据存储的
ArrayLis他基本等同于Vetor，除了Array List是线程不安全(执行效率高)，在对现成的情况下不建议只用ArrayList

ArrayList底层机制及源码分析
Array List中维护了一个Object类型的数组elementData
transient Object [] elementData;		//transient:不被序列化
当创建ArrayList对象时，如果使用的是无参构造器，则初始elementData容量为0，第一次添加，则扩容elementData为10，如需再次扩容，则elementData*1.5
当创建ArrayList对象时，如果使用的是有参构造器，则初始element DATa容量为初始值的1.5倍



Vetor底层机制及源码分析
Vetor底层是一个对象数组，protected Object[] elementData
无参，默认10，满了2倍扩容
有参，直接2倍扩容

LinkedList底层技术及源码分析
底层逻辑是一个双向链表
LinkedList中维护了两个属性fisrt和last分别指向首结点和尾结点
每个节点(Node对象),里面有维护了prev，next，item三个属性，其中通过prev指向前一个，通过next指向后一个节点，最终实现双向列表
所以LinkedList的元素的添加和删除，不是通过数组来完成的，相对来说效率较高

2023/5/9
对链表的CRUD操作进行debug操作，查看源码

ArrayList和List的比较		增删效率			该查效率
ArrayList		可变数组		较低，数组扩容		较高
LinkedList		双向链表		较高，通过链表追加		较低

如何选择ArrayList和LinkedList
如果我们改查操作多，选择ArrayList
如果我们增删操作多，选择LinkedList
一般来说，在程序中，80%-90%都是查询，因此大部分情况下会选择ArrayList
在一个项目中，根据也为灵活选择，也可能这样，一个模块使用的ArrayList，零一模块使用LInkedList

Set接口(集合)
无序(添加和去除顺序不一致)，没有索引
不允许重复元素，最多只含有一个null

常用方法
Set接口时Collection的子接口，同List
取出的顺序是固定的(不是添加的逆序)
遍历方式:itit、I

HashSet全面说明
HashSet实现了Set接口，HashMap底层是(数组+链表+红黑树)
底层实际时HashMap
可以存放null值，元素唯一性
Hash Set不保证元素是有序的，取决于hash后，在确定索引的结果

2023/5/10
添加元素时，先得到hash值->索引值
第一次添加时，table数组扩容至16，临界值(Threshold) = 16 * 加载因子，(loadFactor = 0.75) ，ThreShold = 0.75 * 16 = 12
如果table已使用容量到达(临界值)12，就会两倍扩容16 * 2，并且更新临界值 32 * 0.75 = 24，以此类推
找到存储数据表table，看这个索引位置是否已经存放元素
如果没有，直接加入
如果有，调用equals方法(程序员自定义,并不一定值比较)比较。如果相同，就放弃添加，如果不同，则添加其后(.next = 添加元素)
在Java8中，如果一条链表的元素超过Treeify_Threshold(默认是8)，并且table的大小MIN_TREEIFY_CAPACITY(默认64)，就会进行树化

当Hashset添加了一个元素,不管是否添加至table中还是链表中，size都+1；

自定义因素规定两个输入的对象，是否为同一对象，采用重写.equals(),和hashCode()


LinkedHashset中维护了一个hash表和双向链表
每个元素有before和after属性，这样可以形成双向链表
再添加一个元素时，先求hash值，再求索引，确定该元素在table的位置，然后将添加的元素加入到双向链表中(如果元素存在，不添加)
newElement.pre = tail;
tail = newElement;
插入顺序和遍历顺序一致



Map接口
存放的是双列的元素(键值对)
Map与Collection并列存在，用于保存具有映射关系的数据
Map中的key和value可以是任一引用类型的数据
Map中的键值对会被封装到HashMap$Node对象中
Map中的key(唯一性)不允许一样，若一样，则替换value
key(遵循唯一性)可以空，value可以为空，可以有多个
大部分用String做Map中的key值
key是value的索引

2023/5/11
Map接口遍历
HashMap:
Map接口的常用实现类:HashMap、Hash table和Properties
HashMap是Map接口使用频率最高的实现类
HashMap是以Key-Value对的方式进行存储(Hash Map$Node,Entry)
key不能重复,但是值可以重复，允许使用null键(必须遵循唯一性)和null值
如果添加相同的key,则表示元素的更新
与HashSet一样，不保证映射的顺序，因为底层是以hash表的方式来存储的
HashMap没有实现同步，因此线程成不安全


2023/5/12
Hashtable
存放的元素是键值对,键和值都不能为null,否则会抛出NullPointerException
hashTable使用的方法基本上和hashmap一样
HashTable是线程安全的(synchronized),hashMap是线程不安全的

底层机制分析
底层是一个数组Hashtable$Entry,初始化大小为11
临界值(threshold)为8


Properties类继承自Hashtable类并实现了map类接口,也是使用一种键值对的形式来保存数据
使用特点和Hashtable类似
Properties还可以用于xxx.properties文件中,加载数据到properties类对象并读取和修改
说明:工作后,xxx.properties文件通常作为配置文件,在IO流中说明举例


开发中如何选择集合实现类
在开发中,选择什么集合实现类,主要取决于业务操作特点,然后根据集合实现类特性进行选择,分析如下:
1、先判断存储的类型(一组对象(一组键值对))
2、一组对象:Collection接口
    允许重复:List
        增删多:LinkedList[底层维护了一个双向链表]
        改查多:ArrayList[底层维护Object类型的可变数组]
    不允许重复:Set
        无序:HashSet[底层是HashMap,维护了一个hash表(即数组+链表+红黑树)]
        排序:TreeSet
        插入和取出顺序一致:LinkedHashSet,维护了一个数组+双向链表
3、一组键值对:Map
    键无序:HashMap[底层是:哈希表 jdk7:数组+链表,jdk8:数组+链表+红黑树]
    键排序:TreeMap
    键插入和取出一致:LinkedHashMap
    读取文件:Properties



TreeSet
自定义比较器:Comparabtor
//自定义比较,传入一个比较器
        TreeSet treeSet1 = new TreeSet(new Comparator()
        {
            @Override
            public int compare(Object o1,Object o2)
            {
                return ((String) o1).compareTo((String) o2);
            }
        });
构造器把传入的比较器对象,赋给了TreeSet的底层TreeMap的属性this.comparator
